name: Deploy Production Services

on:
  push:
    branches: [main]
    paths:
      - 'services/**'
      - 'infrastructure/docker-compose/**'
      - 'infrastructure/nginx/**'
      - '.github/workflows/deploy-day1.yml'
  workflow_dispatch:

env:
  DOCKER_REGISTRY: blessing67
  VERSION: ${{ github.sha }}

jobs:
  build-images:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [client, nodeapi, javaapi]

    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_REGISTRY }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Build and push ${{ matrix.service }}
        run: |
          cd services/${{ matrix.service }}
          docker build -t ${{ env.DOCKER_REGISTRY }}/emart-${{ matrix.service }}:${{ env.VERSION }} .
          docker tag ${{ env.DOCKER_REGISTRY }}/emart-${{ matrix.service }}:${{ env.VERSION }} ${{ env.DOCKER_REGISTRY }}/emart-${{ matrix.service }}:latest
          docker push ${{ env.DOCKER_REGISTRY }}/emart-${{ matrix.service }}:${{ env.VERSION }}
          docker push ${{ env.DOCKER_REGISTRY }}/emart-${{ matrix.service }}:latest

  deploy-nodeapi:
    needs: build-images
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan 51.21.180.27 >> ~/.ssh/known_hosts

      - name: Clean existing containers
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@51.21.180.27 << 'EOF'
            docker stop $(docker ps -aq --filter "name=mongo") 2>/dev/null || true
            docker rm $(docker ps -aq --filter "name=mongo") 2>/dev/null || true
            docker stop $(docker ps -aq --filter "name=api") 2>/dev/null || true
            docker rm $(docker ps -aq --filter "name=api") 2>/dev/null || true
          EOF

      - name: Deploy Node API
        run: |
          scp -i ~/.ssh/id_rsa infrastructure/docker-compose/docker-compose.nodeapi.yml ubuntu@51.21.180.27:~/
          ssh -i ~/.ssh/id_rsa ubuntu@51.21.180.27 << 'EOF'
            export VERSION=${{ env.VERSION }}
            docker-compose -f docker-compose.nodeapi.yml pull
            docker-compose -f docker-compose.nodeapi.yml up -d
            sleep 15
          EOF

      - name: Health check
        run: |
          for i in {1..5}; do
            if curl -f http://51.21.180.27:5000/health 2>/dev/null; then
              echo "✓ Node API is healthy"
              exit 0
            fi
            echo "Attempt $i/5..."
            sleep 5
          done
          echo "✗ Health check failed"
          ssh -i ~/.ssh/id_rsa ubuntu@51.21.180.27 "docker logs api --tail 50"
          exit 1

  deploy-javaapi:
    needs: build-images
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan 51.21.200.51 >> ~/.ssh/known_hosts

      - name: Clean existing containers
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@51.21.200.51 << 'EOF'
            docker stop $(docker ps -aq --filter "name=mysql") 2>/dev/null || true
            docker rm $(docker ps -aq --filter "name=mysql") 2>/dev/null || true
            docker stop $(docker ps -aq --filter "name=webapi") 2>/dev/null || true
            docker rm $(docker ps -aq --filter "name=webapi") 2>/dev/null || true
          EOF

      - name: Deploy Java API
        run: |
          scp -i ~/.ssh/id_rsa infrastructure/docker-compose/docker-compose.javaapi.yml ubuntu@51.21.200.51:~/
          ssh -i ~/.ssh/id_rsa ubuntu@51.21.200.51 << 'EOF'
            export VERSION=${{ env.VERSION }}
            docker-compose -f docker-compose.javaapi.yml pull
            docker-compose -f docker-compose.javaapi.yml up -d
            sleep 20
          EOF

  deploy-client:
    needs: [deploy-nodeapi, deploy-javaapi]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan 13.60.196.137 >> ~/.ssh/known_hosts

      - name: Clean existing containers
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@13.60.196.137 << 'EOF'
            docker stop $(docker ps -aq --filter "name=nginx") 2>/dev/null || true
            docker rm $(docker ps -aq --filter "name=nginx") 2>/dev/null || true
            docker stop $(docker ps -aq --filter "name=client") 2>/dev/null || true
            docker rm $(docker ps -aq --filter "name=client") 2>/dev/null || true
          EOF

      - name: Deploy Client
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@13.60.196.137 'mkdir -p ~/nginx'
          scp -i ~/.ssh/id_rsa infrastructure/docker-compose/docker-compose.client.yml ubuntu@13.60.196.137:~/
          scp -i ~/.ssh/id_rsa infrastructure/nginx/default.conf ubuntu@13.60.196.137:~/nginx/
          ssh -i ~/.ssh/id_rsa ubuntu@13.60.196.137 << 'EOF'
            export VERSION=${{ env.VERSION }}
            docker-compose -f docker-compose.client.yml pull
            docker-compose -f docker-compose.client.yml up -d
            sleep 10
          EOF

      - name: Deployment Summary
        run: |
          echo "=========================================="
          echo "✓ Deployment Complete!"
          echo "=========================================="
          echo "Node API: http://51.21.180.27:5000"
          echo "Java API: http://51.21.200.51:9000"
          echo "Client: http://13.60.196.137"
          echo "=========================================="